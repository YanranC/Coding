class Solution {
    public static int find_left(int[] nums, int target) {
		int left=0; int right=nums.length-1;
		while(left<=right) {	
			int mid=left+(right-left)/2;
			if(nums[mid]>target) {
				right=mid-1;
			}else if(nums[mid]<target) {
				left=mid+1;
			}else {
				right=mid-1;
			}
		}
		if(left>=nums.length || nums[left]!=target)return -1;
		return left;
	}
	
	public static int find_right(int[] nums, int target) {
		int left=0; int right=nums.length-1;
		while(left<=right) {	
			int mid=left+(right-left)/2;
			if(nums[mid]>target) {
				right=mid-1;
			}else if(nums[mid]<target) {
				left=mid+1;
			}else {
				left=mid+1;
			}
		}
		if(right<0 || nums[right]!=target)return -1;
		return right;
	}


    public int[] searchRange(int[] nums, int target) {
        return new int[] {find_left(nums, target), find_right(nums, target)};
    }
}